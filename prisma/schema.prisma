generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @map("_id") @default(auto()) @db.ObjectId
  email        String   @unique
  name         String?
  image        String?
  password     String
  role         String   @default("admin")
  isVerified   Boolean  @default(false)
  otp          String?
  otpExpiresAt DateTime?
  otpSentAt    DateTime?
  lastLogin    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("admin")
}

// ------ Patients (your Mongoose User model â†’ "users") -------
model Patient {
  id                     String   @id @map("_id") @default(auto()) @db.ObjectId
  userName               String
  email                  String   @unique
  password               String
  otp                    String?
  otpExpires             DateTime?
  verified               Boolean  @default(false)
  dob                    DateTime?
  location               String?
  lat                    Float?
  lng                    Float?
  gender                 String?
  image                  String?
  resetPasswordAllowed   Boolean  @default(false)
  otpPurpose             String?

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  medicalOpinions        MedicalOpinion[]  // relation back
  reviews                DoctorReview[]

  @@map("users")  // ðŸ‘ˆ matches your Mongo collection
}


// ---------- Doctors (maps to the "doctors" collection) ----------

model Doctor {
  id                     String   @id @map("_id") @default(auto()) @db.ObjectId
  firstName              String
  lastName               String
  email                  String   @unique
  password               String
  bio                    String?
  experience             Int?     @default(0)
  location               String?
  lat                    Float?
  lng                    Float?
  specializations        String[]
  medicalSpecialty       String[]
  procedures             Procedure[]        // embedded array
  brandTechnique         String[]
  verificationDocs       VerificationDoc[]  // embedded array
  image                  String?
  clinicImage            String?
  clinicName             String?
  bookingLink            String?
  medicalOpinionRequest  Boolean? @default(true)
  resetPasswordAllowed   Boolean? @default(false)
  emailVerified          Boolean? @default(false)
  verified               Int       @default(0) // your data shows 0/1
  clicks                 Int       @default(5)
  isSubscribed           Boolean   @default(true)
  subscriptionType       String    @default("pay_as_you_go")
  otp                    String?
  otpExpires             DateTime?
  otpPurpose             String?
  rejectionReason        String?
  rejectedAt             DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  medicalOpinions        MedicalOpinion[]
  reviews                DoctorReview[]

  @@map("doctors")
}

// ----- Embedded types (MongoDB only) -----

type Zone {
  zone           String?
  beforeImageUrl String?
  afterImageUrl  String?
}

type BeforeAfterPicture {
  bodyPart String?
  zones    Zone[]
}

type PriceRange {
  min Int?
  max Int?
}

type Procedure {
  currency            String?
  procedureType       String?
  priceRange          PriceRange?
  beforeAfterPictures BeforeAfterPicture[]
}

type VerificationDoc {
  name String?
  link String?
}

// ------ Medical Opinion (map + relations) ------
enum MedicalOpinionStatus {
  pending
  accepted
  rejected
  completed
}

model MedicalOpinion {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  doctorId       String   @db.ObjectId
  procedure      String
  note           String
  images         String[]
  charges        Int      @default(40)
  status         MedicalOpinionStatus @default(pending)
  doctorResponse String?
  price          Int?
  respondedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // âœ… Relations
  user   Patient @relation(fields: [userId], references: [id])
  doctor Doctor  @relation(fields: [doctorId], references: [id])
  reviews DoctorReview[]

  @@map("medicalopinions") // ðŸ‘ˆ exact collection name from your screenshot
}

// ------ Doctor Reviews ------
model DoctorReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  doctorId  String   @db.ObjectId
  opinionId String?  @db.ObjectId

  rating    Int
  comment   String
  hidden    Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    Patient        @relation(fields: [userId], references: [id])
  doctor  Doctor         @relation(fields: [doctorId], references: [id])
  opinion MedicalOpinion? @relation(fields: [opinionId], references: [id])

  @@map("doctorreviews")
}